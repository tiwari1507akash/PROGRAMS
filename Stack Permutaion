 def isStackPermutation(self, N : int, A : List[int], B : List[int]) -> int:
        l=[]
        i=j=0
        while(j<N):
            while(i<N and (len(l)==0 or l[-1]!=B[j])):
                l.append(A[i])
                i+=1
            while(len(l)!=0 and l[-1]==B[j]):
                l.pop()
                j+=1
            if(i==N and len(l)!=0 and l[-1]!=B[j]):
                return 0;
        return 1
       
       
N = 3
A = {1,2,3}
B = {2,1,3}
Output:
1
Explanation:
1. push 1 from A to stack
2. push 2 from A to stack
3. pop 2 from stack to B
4. pop 1 from stack to B
5. push 3 from A to stack
6. pop 3 from stack to B

N = 3
A = {1,2,3}
B = {3,1,2}
Output:
0
